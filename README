Overview
--------------------------------------------------------------------------------------
The overall goal is a single autopilot system capable of flying a quad/ car/ heli/ boat/ plane
just by changing a compile time flag. In order to reach this goal many existing structures
have been highly abstracted and reworked.

Another goal is to abstract the sensor interfaces enough that this autopilot can
also be used for the original ArduPilot system and future DIY drones hardware.

The ArduPilot support will require further library abstraction that has not yet 
been handled.

COMPLETED: Loop Scheduling
--------------------------------------------------------------------------------------
A Loop class has been implemented to schedule callbacks at different rates. When each loop
is updated it calls all subloop updates first and then calls its own update. This allows
a hierarchical event tree to be setup. The loops currently compute dt and load so don't get
too carried away with the number of subloops. This should probably be done in a special update
function to allow these calcs to be turned off. The callback functions have a void pointer 
to allow access to the class member varibles through casting the this pointer. This loop
scheduling forms the backbone of the code and has already been completed.

COMPLETED: EEPROM Parameter Management
--------------------------------------------------------------------------------------
The AP_EEProm class has been created to allow automatic mapping of EEPROM stored 
variables.

COMPLETED: Control System
--------------------------------------------------------------------------------------
The control system is defined by a set of blocks, much like scicoslab or simulink. This block set
is then read in and loads the appropriate classes to create the control system.

IN PROGRESS: Guidance System
--------------------------------------------------------------------------------------
The guidance system takes the waypoints and current position as input and outputs the desired
heading, velocity, and altitude to the controller. This should be relatively easy to 
implement.

DEBUGGING: Communication
--------------------------------------------------------------------------------------
The mavlink communication protocol will be used for comms at this time.
This has not been implemented yet but shouldn't take much work.

Libraries
--------------------------------------------------------------------------------------
The existing APM libraries should provide all necessary sensor interfaces etc.

Coding Standard
--------------------------------------------------------------------------------------
The main structure of code strives to follow the C++ paradigms.
1. Resource allocation is initialization. (RAII)
2. Do not use global variables.
3. etc.. etc..

The documentation in the code is being done with doxygen javadoc style markup. This will allow
automatic generation of documentation for the code.

The coding standard is pretty well.. standard :-)
1. camelCase
2. lowercase for variables names
3. uppercase for classes
4. enums are lower case followed by _t ... example_t
5. Format the code with astyle on the K/R setting.

All are welcome to help with the code.

Cheers,

James (james.goppert@gmail.com)

// vim:ts=4:sw=4:expandtab
